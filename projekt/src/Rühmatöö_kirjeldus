Projekt: Kasiino
Autorite nimed: Markkus Pokrovski, Hugo Tristan Tammik
Rühm: 6.rühm

Projekti kirjeldus: Selle programmi eesmärk on luua kasiino, kus mängijad saavad mängida kahte
    populaarset kasiinomängu: rulett ja blackjack. Programmi alguses küsitakse mängija nime ning antakse
    talle 100 eurot mängurahana. Mängija saab valida, millist mängu ta soovib mängida, ning panustada
    oma raha vastavalt mängureeglitele.

Tööpõhimõte: Programmi käivitamine:
            - Programmi saab käivitada peaklassist Kasiino.
            - Mängija sisestab oma nime.
            - Mängija saab valida kahe mängu vahel: rulett või blackjack.

             Mängude kirjeldus:
            - Rulett: Mängija panustab kas värvile (punane/must), täpsele numbrile või muudele panustamisvõimalustele. Kui keerutuse tulemus vastab panusele, saab mängija võidu.
            - Blackjack: Klassikaline kaardimäng, kus mängija püüab saada kaardikäe summaks 21 või lähedale, kuid mitte üle selle. Võidab see, kelle käsi on diileri omast parem.

             Mänguraha ja panustamine:
            - Mängija saab panustada oma raha igas mängus.
            - Kui mängija kaotab kogu raha, ei saa ta edasi mängida ja peab programmi taaskäivitama.
            - Kui mängija soovib lahkuda, saab ta seda teha mängu sees, sisestades vastava käsu.

Kasutusjuhend: Käivita programm peaklassist Kasiino. Sisesta oma nimi. Vali, kas soovid mängida ruletti või blackjacki.
    Tee panus ja jälgi mängu kulgu. Kui soovid lahkuda, kasuta mängus pakutavat väljumisvõimalust.

Mängureeglid:
    Blackjack: https://bicyclecards.com/how-to-play/blackjack
    Rulett: https://www.clearwatercasino.com/wp-content/rules/Roulette.html


Klassid, nende eesmärk ja olulisemad meetodid:

    1. Kasiino klass:
        - eesmärk: Peaklass, mis loob kasiino isendi, küsib mängija nime ja alustab programmi. Annab valiku mängida
        ruletti, blackjacki või lahkuda kasiinost.
        - olulisemad meetodid: alusta(), see paneb programmi käima (printides ekraanile valikud)

    2. KasiinoMängija klass:
        - eesmärk: Klass, mis loob mängija isendi, parameetriteks on kasutajalt saadud nimi ja algne raha (mis on vaikimisi 100 eurot)
        - olulisemad meetodid: getRaha() - tagastab mängija raha, lisaRaha(int summa) - lisab mängjale raha,
        panePanus(int summa) - kontrollib, et mängijal on kontol piisavalt raha ja kui on, teeb panuse ja võtab mängija kontolt
        panuse raha ära, getNimi() - tagastab mängija nime ja toString() - tagastab nime ja kui suure summaga kasiinost lahkus.

    3. Rulett klass
        - eesmärk: Klass, mille sees toimub ruleti mäng.
        - olulisemad meetodid: mäng() - selle sees toimub ruleti mäng, küsib mängijalt panuse suurust ja seejärel küsib, mille peale
        tahab panustada. Seejärel ratas keerleb ja lõpuks kuvab tulemuse, kas siis võit või kaotus. kasPunane() - kontrollib, kas
        keerutusest tulnud arv on punane kui ei ole siis ta on must, välja arvatud arv 0, selle arvu värvus on roheline.

    4. MängBlackjack
        - eesmärk: Klass, mille sees toimub blackjacki mäng.
        - olulisemad meetodid: mäng() - peamine mängutsükkel, kus mängija teeb panuse ja mängib. mängijaKäik(Käsi käsi) - kontrollib,
        kas mängija soovib võtta kaarte (hit) või jääda seisma (stand). kontrollivõitjat(Käsi käsi) - määrab, kas mängija võitis
        või kaotas ja uuendab selle põhjal tema saldot.

    5. MängijaBlackjack
        - eesmärk: Klass, mis hoiab mängija panust ja kaarte, võimaldab panustamist ja võitude arvutamist.
        - olulisemad meetodid: panusta(int summa) - võtab mängija saldost panuse maha. nulliKäed() - nullib mängija kaardid, kui
        algab uus ring. võidaPanus(double kordaja) - lisab mängijale võidusumma.

    6. Diiler
        - eesmärk: Klass, mis hoiab diileri kaarte ja mänguloogikat.
        - olulisemad meetodid: getKäsi() - tagastab diileri kaardid (käe). mängi(Pakk pakk) - diiler võtab nii kaua kaarte, kuni
         tema kaartide summa jõuab vähemalt 17ni.

    7. Käsi
        - eesmärk: Klass, mille sees arvutatakse mängija/diileri kaartide summat.
        - olulisemad meetodid: summa() - arvutab käe koguväärtuse ning kaarti äss arvestab väärtusega 11 nii kaua kuni see on võimalik,
        peale mida on ässa väärtus 1. onBlackjack() - kontrollib, kas mängijal on kohe 21.  lisaKaart(Kaart kaart) - lisab uue kaardi kätte.
        onLäbi() - kontrollib, kas käe väärtus on üle 21. getEsimeneKaart() - tagastab ainult esimese kaardi (diileri ühe kaardi näitamiseks).

    8. Kaart
        - eesmärk: Klass, mis "esindab" ühte mängukaarti (näiteks: Kuningas Ärtu)
        - olulisemad meetodid: getVäärtus() - tagastab kaardi väärtuse punktidena (pildikaardid on 10, äss vastavalt 11 või 1.)
        toString() - tagastab kaardi nimetuse (näiteks: Kuningas Poti, Emand Risti)

    9. Pakk
        - eesmärk: Klass, mille sees on kõik mängukaardid ja jagab neid mängijatele.
        - olulisemad meetodid: segagePakk() - segab kaardipakki. jagaKaart() - võtab pakist pealmise kaardi ning annab selle mängijale.

Projekti tegemise protsessi kirjeldus:
    Projekti planeerimine:
        - koostasime esialgse plaani ja mis mängud programmi lisame
        - jagasime ülesanded rühmaliikmete vahel
        - määrasime tähtajad

    Baasstruktuuri loomine:
        - Kasiino peaklass
        - Kasiino mängija klass
        - Määrasime ära ruleti ja blackjacki klassid

    Mängude programmeerimine:
        - Rulett: Panustamise võimalused, arvude genereerimise ja võidutulemuste kontrollimise
        - Blackjack: klassid mis tegid ja milleks

    Kasutajaliidese parandamine ja veakontroll:
        - Kasutajasõbralikumad teated ja vigade käsitlemine (alede sisendite vältimine).
        - Kontroll, et mängija ei saaks panustada rohkem raha, kui tal on või negatiivset arvu.

    Lõplik testimine ja viimistlemine:
        - Testisime mängude käiku erinevate sisenditega.
        - Parandasime viimased vead ja optimeerisime koodi.
        - Dokumenteerisime programmi töö ja koostasime kasutusjuhendi.

    Kokkuvõte: Mõlemad rühmaliikmed osalesid kõikides etappides.

Iga rühmaliikme panus:
    - Markkus: Klassid: Kasiino, KasiinoMängija, Rulett.
      Ajakulu: 1,5h planeerimine, 5h koodi kirjutamine, 1h kontrollimine ja vigade parandus, 1h kokkuvõtte tegemine.
    - Hugo: Klassid: MängBlackJack, MängijaBlackJack, Pakk, Käsi, Kaart, Diiler.
      Ajakulu: 1,5h planeerimine, 5h koodi kirjutamine, 1h kontrollimine ja vigade parandus, 1h kokkuvõtte tegemine.

Tegemise mured:
    - Tegemisel ei tekkinud suuri muresi, ega kohti kus oleksime tundnud, et teadmistest jääb puudu.

Hinnang oma töö lõpptulemusele:
    - Saime hästi hakkama: Suutsime hästi siduda oma eraldi tehtud mängud main programmiga nii, et midagi ei läinud katki ja tervik töötab ilusti.
    - Vajab veel edasiarendust: Blackjacki split ehk kaartide poolitamise funktsioon ja ka double ehk duubeldamise funktsioon, Rulett veel erinevaid panuseid pole kõiki.
    Samuti lisada veel graafiline kasutajaliides, progressi salvestamine ja veel mänge lisada.

Selgitus ja/või näited, kuidas programmi osi eraldi ja programmi tervikuna testisite ehk kuidas veendusite, et programm töötab korrektselt:
    - Programmi tervikliku testimise jaoks veendusime, et kõik mängud ja kasiino süsteem töötavad koos ilma vigadeta.
    - Alustasime sellega, et saada mängud kõigepealt eraldi tööle ja seejärel nad ühendada tervikuks.

    - Selgitus: Kontrollisime, kas kaardid luuakse õigesti ning nende väärtused ja nimed kuvatakse õigesti.
    - Näide: public class KaartTest {
                 public static void main(String[] args) {
                     Kaart kaart = new Kaart("Poti", "Äss", 11);
                     System.out.println(kaart);
                     System.out.println("Väärtus: " + kaart.getVäärtus()); // väärtuseks peab tulema 11
                 }
             }

    - Selgitus: Kontrollisime, kas mäng töötab loogiliselt ehk kas mängija saab kaarte võtta, panuseid teha ja kas mängu tulemus määratakse õigesti.
    - Näide: public class BlackjackTest {
                 public static void main(String[] args) {
                     KasiinoMängija mängija = new KasiinoMängija("Testija", 100);
                     MängBlackjack blackjack = new MängBlackjack(mängija);
                     blackjack.mäng(); // Testime täispikka mängu
                 }
             }

    - Selgitus: Testisime, kas mängija saab kasiinos valida Blackjacki, Ruletti või lahkuda mängust.
    - Näide: public class KasiinoTest {
                 public static void main(String[] args) {
                     Kasiino kasiino = new Kasiino();
                     kasiino.alusta();
                 }
             }
